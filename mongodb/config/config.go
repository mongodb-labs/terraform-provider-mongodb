package config

import (
	"bytes"
	"io/ioutil"
	"log"
	"os"

	"github.com/mongodb-labs/terraform-provider-mongodb/mongodb/util"

	"gopkg.in/yaml.v2"
)

// MongoDB MongoDB configuration file struct (https://docs.mongodb.com/manual/reference/configuration-options/)
type MongoDB struct {
	Net               *Net               `yaml:"net,omitempty"`
	ProcessManagement *ProcessManagement `yaml:"processManagement,omitempty"`
	Replication       *Replication       `yaml:"replication,omitempty"`
	SetParameter      map[string]string  `yaml:"setParameter,omitempty"`
	Storage           *Storage           `yaml:"storage,omitempty"`
	SystemLog         *SystemLog         `yaml:"systemLog,omitempty"`
}

// NewMongoDBConfig Construct a new MongoDB configuration struct
func NewMongoDBConfig() *MongoDB {
	return &MongoDB{
		Net:               &Net{},
		ProcessManagement: &ProcessManagement{},
		Replication:       &Replication{},
		SetParameter:      make(map[string]string),
		Storage: &Storage{
			Journal: &Journal{},
			WiredTiger: &WiredTiger{
				EngineConfig: &EngineConfig{},
			},
		},
		SystemLog: &SystemLog{},
	}
}

// Net MongoDB configuration for network parameters
type Net struct {
	BindIP string `yaml:"bindIp"`
	Port   int    `yaml:"port"`
}

// ProcessManagement MongoDB configuration for how the process is managed
type ProcessManagement struct {
	Fork bool `yaml:"fork"`
}

// Replication MongoDB configuration for replication options
type Replication struct {
	EnableMajorityReadConcern bool   `yaml:"enableMajorityReadConcern,omitempty"`
	LocalPingThresholdMs      int    `yaml:"localPingThresholdMs,omitempty"`
	OplogSizeMB               int    `yaml:"oplogSizeMb,omitempty"`
	ReplSetName               string `yaml:"replSetName,omitempty"`
	SecondaryIndexPrefetch    string `yaml:"secondaryIndexPrefetch,omitempty"`
}

// SystemLog MongoDB configuration for logging
type SystemLog struct {
	Destination string `yaml:"destination,omitempty"`
	Path        string `yaml:"path"`
	LogAppend   bool   `yaml:"logAppend"`
}

const commentString = "# DO NOT CHANGE - this file was generated by the MongoDB Terraform Provider"

// SaveToTempFile saves the MongoDB config to a temporary file and returns an open file pointer
func (mdb *MongoDB) SaveToTempFile(path string) (*os.File, error) {
	// marshall the config to a YAML string
	data, err := yaml.Marshal(mdb)
	if err != nil {
		return nil, err
	}

	// prepare a read/write buffer
	buff := bytes.NewBuffer(make([]byte, 0, len(data)))

	// write a comment header
	_, err = buff.WriteString(commentString + "\n")
	util.PanicOnNonNilErr(err)

	// then write the data
	var byteLength int
	if byteLength, err = buff.Write(data); err != nil {
		return nil, err
	}
	log.Printf("[DEBUG] wrote %d bytes into the buffer", byteLength)

	// create a temporary file
	file, err := util.ReadAllIntoTempFile(buff, "mongod.log")
	if err != nil {
		return nil, err
	}

	return os.Open(file.Name())
}

// LoadFromFile loads a MongoDB config from the specified file
func LoadFromFile(path string) (*MongoDB, error) {
	raw, err := ioutil.ReadFile(path)
	util.PanicOnNonNilErr(err)

	config := NewMongoDBConfig()
	err = yaml.Unmarshal(raw, config)
	return config, err
}

// LoadFromString loads a MongoDB config from the specified string
func LoadFromString(data string) (*MongoDB, error) {
	config := NewMongoDBConfig()
	err := yaml.Unmarshal([]byte(data), config)
	return config, err
}
